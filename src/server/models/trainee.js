// 
// trainee.js
// 
//	-- corresponds to an entry in the trainee table
//	-- properties: 
//		-- id,
//		-- accountId
//		-- [contactInfo]
//		-- [healthInfo] 
//		-- sponsor: accountId of the sponsor
//  -- Note: in theory every tainee should have an account on the system.
//  		but for v1, since we are allowing trainers to create new trainees, 
//  		who may not have an account, we need the trainee table to store
//  		the trainees created by trainers without account info.    
//
// 

var Limits = require('../constants.js').Limits;

module.exports = function(sequelize, DataTypes) {

	return sequelize.define(
		//
		// model/table name
		//
		'trainee',  
		//
		// model attributes/table columns (other than virtual ones)
		//
		{
			// id -- primary key, auto generated by sequelize
			// foreign keys: all added through the association defined in db.js
			// 		accountId -- foreign key to the account table, representing the account for this trainee
			// 		sponsorAccountId -- foreign key to the account table, representing the account for the sponsor
			//					of this trainee
			// 		locationId -- foreign key to the city table
			// 		profilePictureId -- foreign key to the picture table, added through belongsTo call in db.js
			isMale: {
				type: DataTypes.BOOLEAN,
				allowNull: false
			},
			nickname: {
				type: DataTypes.STRING,
				allowNull: false,
				validate: {
					len: [Limits.Name.minLen, Limits.Name.maxLen]
				}
			},
			email: {
				type: DataTypes.STRING,
				allowNull: false,
				validate: {
					isEmail: true,
					len: [Limits.Email.minLen, Limits.Email.maxLen]
				}
			},
			birthdate: {
				type: DataTypes.DATE,
				allowNull: false 
				// ToDo: add validation
			},
			// cm 
			height: {
				type: DataTypes.INTEGER,
				allowNull: false,
				validate: {
					min: Limits.Height.min,
					max: Limits.Height.max
				}
			},
			// 斤
			weight: {
				type: DataTypes.FLOAT,
				allowNull: false,
				validate: {
					min: Limits.Weight.min,
					max: Limits.Weight.max
				}				
			},
			// %
			bodyfat: {
				type: DataTypes.FLOAT,
				allowNull: true,				
				validate: {
					min: Limits.Bodyfat.min,
					max: Limits.Bodyfat.max
				}, 
				set: function(val) {
					if (typeof val === 'string' && val.trim() === '') {
						val=null;
					}
					this.setDataValue('bodyfat', val);
				}				
			},
			profession: {
				type: DataTypes.STRING,
				allowNull: true,
				validate: {
					len: [Limits.Profession.minLen, Limits.Profession.maxLen]
				}, 
				set: function(val) {
					if (typeof val === 'string' && val.trim() === '') {
						val=null;
					}
					this.setDataValue('profession', val);
				}
			},	
			habbit: {
				type: DataTypes.STRING,
				allowNull: true,
				validate: {
					len: [Limits.Habbit.minLen, Limits.Habbit.maxLen]
				}, 
				set: function(val) {
					if (typeof val === 'string' && val.trim() === '') {
						val=null;
					}
					this.setDataValue('habbit', val);
				}
			},
			location: {
				type: DataTypes.STRING,
				allowNull: false,
				validate: {
					len: [Limits.Location.minLen, Limits.Location.maxLen]
				}
			},
			// 斤
			weightGoal: {
				type: DataTypes.FLOAT,
				allowNull: true,
				validate: {
					min: Limits.Weight.min,
					max: Limits.Weight.max
				}, 
				set: function(val) {
					if (typeof val === 'string' && val.trim() === '') {
						val=null;
					}
					this.setDataValue('weightGoal', val);
				}
			},
			// %
			bodyfatGoal: {
				type: DataTypes.FLOAT,
				allowNull: true,
				validate: {
					min: Limits.Bodyfat.min,
					max: Limits.Bodyfat.max
				}, 
				set: function(val) {
					if (typeof val === 'string' && val.trim() === '') {
						val=null;
					}
					this.setDataValue('bodyfatGoal', val);
				}				
			},
			signature: {
				type: DataTypes.STRING,
				allowNull: true,
				validate: {
					len: [Limits.Signature.minLen, Limits.Signature.maxLen]
				}, 
				set: function(val) {
					if (typeof val === 'string' && val.trim() === '') {
						val=null;
					}
					this.setDataValue('signature', val);
				}
			},
			sponsorName: {
				type: DataTypes.STRING,
				allowNull: false,
				validate: {
					len: [Limits.Name.minLen, Limits.Name.maxLen]
				}
			},
			sponsorMobile: {
				type: DataTypes.STRING,
				allowNull: false,
				validate: {
					isNumeric: true, // only allow numbers
					len: [Limits.Mobile.minLen, Limits.Mobile.maxLen] // valid mobile number should have at least 11 digits
				}
			}
		}
	);
}