// 
// workoutItem.js
// 
//	-- corresponds to an entry in the workoutItem table
//	-- properties: 
//		-- id,
//		-- accountId
//		-- traineeId  (to accommodate for any trainee not already in the DB)
//		-- date  (this is the date that the workout info is for; not neceesarily the created date of the record)
//		-- workoutTypeId  (foreign key to the workoutType table)
//		-- description
//		-- duration (in minutes)
//		-- distance (in km)
//

var Limits = require('../constants.js').Limits;
var Utils = require('../util.js');

module.exports = function(sequelize, DataTypes) {

	return sequelize.define(
		//
		// model/table name
		//
		'workoutItem',  
		//
		// model attributes/table columns (other than foreign keys and virtual ones)
		//
		{
			// id -- primary key, auto generated by sequelize

			// foreign keys: all added through the association defined in db.js
			// 		accountId -- foreign key to the account table, representing the account for the trainee
			//      workoutTypeId -- 跑步/游泳/...   foreign key to the workoutType table
			
			date: {
				type: DataTypes.STRING,
				allowNull: false,
				validate: {
					isValidDate: function(value) {
						if (!Utils.isValidDate(value)) {
							throw new Error('Date is not in the \'yyyy-mm-dd\' format');
						}
					}
				}
				
			},
			description: {
				type: DataTypes.STRING,
				allowNull: true,
				validate: {
					len: [Limits.Workout.Description.minLen, Limits.Workout.Description.maxLen]
				}, 
				set: function(val) {
					if (typeof val === 'string' && val.trim() === '') {
						val=null;
					}
					this.setDataValue('description', val);
				}
			},				
			// 分钟
			duration: {
				type: DataTypes.FLOAT,
				allowNull: true,
				validate: {
					min: Limits.Workout.Duration.min,
					max: Limits.Workout.Duration.max
				},
				set: function(val) {
					if (typeof val === 'string' && val.trim() === '') {
						val=null;
					}
					this.setDataValue('duration', val);
				}								
			},
			// 公里
			distance: {
				type: DataTypes.FLOAT,
				allowNull: true,				
				validate: {
					min: Limits.Workout.Distance.min,
					max: Limits.Workout.Distance.max
				},
				set: function(val) {
					if (typeof val === 'string' && val.trim() === '') {
						val=null;
					}
					this.setDataValue('distance', val);
				}				
			} 
		}
	);
}